buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
        gradleDockerVersion = '0.20.1'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradleDockerVersion}")
    }
}

allprojects {
    group = 'com.tictactoe'

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.palantir.docker'
    apply plugin: 'com.palantir.docker-run'
    apply plugin: 'com.palantir.docker-compose'
}

docker.name = 'com.tictactoe'
bootJar.enabled = false

sourceCompatibility = 10

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

subprojects {
    ext['springCloudVersion'] = 'Greenwich.M3'

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

project(':spring-servers') {
    bootJar.enabled = false

    dockerCompose {
        template 'docker-compose.spring-servers.template.yml'
        dockerComposeFile 'docker-compose.spring-servers.yml'
    }
}

project(':tictactoe-services') {
    bootJar.enabled = false
}

project(':spring-servers:discovery-server') {
    bootJar {
        launchScript()
        baseName = 'discovery-server'
        version = '0.1.0'
    }

    dependencies {
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-server')
        implementation('org.springframework.boot:spring-boot-starter-security')

        compile('javax.xml.bind:jaxb-api:2.3.0')
        compile('javax.activation:activation:1.1')
        compile('org.glassfish.jaxb:jaxb-runtime:2.3.0')

        testImplementation('org.springframework.boot:spring-boot-starter-test')
    }
}

project(':spring-servers:config-server') {
    bootJar {
        launchScript()
        baseName = 'config-server'
        version = '0.1.0'
    }

    dependencies {
        docker project(':spring-servers:discovery-server')

        implementation('org.springframework.boot:spring-boot-starter-security')

        implementation('org.springframework.cloud:spring-cloud-config-server')
        implementation('org.springframework.cloud:spring-cloud-starter-config')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')

        testImplementation('org.springframework.boot:spring-boot-starter-test')
    }
}

project(':spring-servers:gateway-server') {
    bootJar {
        launchScript()
        baseName = 'gateway-server'
        version = '0.1.0'
    }

    dependencies {
        docker project(':spring-servers:config-server')
        docker project(':spring-servers:discovery-server')

        implementation('org.springframework.cloud:spring-cloud-starter-netflix-zuul')
        implementation('org.springframework.cloud:spring-cloud-starter-config')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')

        testImplementation('org.springframework.boot:spring-boot-starter-test')
    }
}

project(':spring-servers:admin-server') {
    ext['springBootAdminVersion'] = '2.1.1'

    bootJar {
        launchScript()
        baseName = 'admin-server'
        version = '0.1.0'
    }

    dependencies {
        docker project(':spring-servers:config-server')
        docker project(':spring-servers:discovery-server')

        implementation('org.springframework.boot:spring-boot-starter-web')
        implementation('org.springframework.boot:spring-boot-starter-security')

        implementation('de.codecentric:spring-boot-admin-starter-server')

        implementation('org.springframework.cloud:spring-cloud-starter-config')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')

        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('org.springframework.security:spring-security-test')
    }

    dependencyManagement {
        imports {
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        }
    }
}

project(':tictactoe-services:user-service') {
    bootJar {
        launchScript()
        baseName = 'user-service'
        version = '0.1.0'
    }

    dependencies {
        implementation project(':tictactoe-services:domain-module')
        implementation project(':tictactoe-services:auth-module')

        implementation('org.springframework.boot:spring-boot-starter-actuator')
        implementation('org.springframework.boot:spring-boot-starter-webflux')
        implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
        implementation('org.springframework.boot:spring-boot-starter-security')

        implementation('org.springframework.security:spring-security-oauth2-core')
        implementation('org.springframework.security:spring-security-oauth2-jose')

        implementation('org.springframework.cloud:spring-cloud-starter-config')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
        implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
        implementation('org.springframework.cloud:spring-cloud-starter-zipkin')
        implementation('org.springframework.security:spring-security-rsa')

        implementation('org.apache.commons:commons-lang3:3.8.1')
        runtimeOnly('org.springframework.boot:spring-boot-devtools')
        compileOnly('org.projectlombok:lombok')

        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
        testImplementation('io.projectreactor:reactor-test')
    }
}

project(':tictactoe-services:game-service') {
    bootJar {
        launchScript()
        baseName = 'game-service'
        version = '0.1.0'
    }

    dependencies {
        implementation project(':tictactoe-services:domain-module')
        implementation project(':tictactoe-services:auth-module')

        implementation('org.springframework.boot:spring-boot-starter-actuator')
        implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
        implementation('org.springframework.boot:spring-boot-starter-webflux')
        implementation('org.springframework.boot:spring-boot-starter-security')

        implementation('org.springframework.security:spring-security-oauth2-core')
        implementation('org.springframework.security:spring-security-oauth2-jose')

        implementation('org.springframework.cloud:spring-cloud-starter-config')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
        implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
        implementation('org.springframework.cloud:spring-cloud-starter-zipkin')

        compileOnly('org.projectlombok:lombok')
        runtimeOnly('org.springframework.boot:spring-boot-devtools')

        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('io.projectreactor:reactor-test')
    }
}

project(':tictactoe-services:web-api') {
    bootJar {
        launchScript()
        baseName = 'web-api'
        version = '0.1.0'
    }

    dependencies {
        implementation(project(':tictactoe-services:domain-module')) {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-mongodb-reactive'
        }
        implementation(project(':tictactoe-services:auth-module')) {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-mongodb-reactive'
        }

        implementation('org.springframework.boot:spring-boot-starter-actuator')
        implementation('org.springframework.boot:spring-boot-starter-webflux')
        implementation('org.springframework.boot:spring-boot-starter-security')

        implementation('org.springframework.security:spring-security-oauth2-core')
        implementation('org.springframework.security:spring-security-oauth2-jose')

        implementation('org.springframework.cloud:spring-cloud-starter-config')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
        implementation('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
        implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
        implementation('org.springframework.cloud:spring-cloud-starter-zipkin')

        implementation('io.projectreactor:reactor-core')
        runtimeOnly('org.springframework.boot:spring-boot-devtools')
        compileOnly('org.projectlombok:lombok')

        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('io.projectreactor:reactor-test')
    }
}

project(':tictactoe-services:auth-module') {
    bootJar.enabled = false

    jar {
        enabled = true
        group 'com.tictactoe'
        baseName = 'auth-module'
        version = '1.0'
    }

    dependencies {
        implementation project(':tictactoe-services:domain-module')

        implementation('org.springframework.boot:spring-boot-starter-webflux')
        implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
        implementation('org.springframework.boot:spring-boot-starter-security')

        implementation('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')

        implementation('org.springframework.security:spring-security-oauth2-core')
        implementation('org.springframework.security:spring-security-oauth2-jose')

        compileOnly('org.projectlombok:lombok')

        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('io.projectreactor:reactor-test')
        testImplementation('org.springframework.security:spring-security-test')
    }
}

project(':tictactoe-services:domain-module') {
    bootJar.enabled = false

    jar {
        enabled = true
        group 'com.tictactoe'
        baseName = 'domain-module'
        version = '1.0'
    }

    dependencies {
        implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
        implementation('com.fasterxml.jackson.core:jackson-annotations:2.9.3')

        compileOnly('org.projectlombok:lombok')

        testCompile group: 'junit', name: 'junit', version: '4.12'
    }
}

subprojects { subproject ->
    if (file("${subproject.projectDir}/docker/Dockerfile").exists()) {
        docker {
            name "workingbit/${subproject.group}.${subproject.bootJar.baseName}"
            tags "${subproject.bootJar.version}", 'latest'
            dockerfile file("${subproject.projectDir}/docker/Dockerfile")
            files tasks.bootJar.archivePath, 'docker/run.sh'
            buildArgs "JAR_FILE": "${subproject.bootJar.baseName}-${subproject.bootJar.version}.jar",
                    "RUN_SH": "run.sh"
            noCache true
        }

        dockerRun {
            name "${subproject.bootJar.baseName}"
            image "workingbit/${subproject.group}.${subproject.bootJar.baseName}"
            ports '8080:8080'
        }
    } else {
        docker.name = 'noop'
    }
}
